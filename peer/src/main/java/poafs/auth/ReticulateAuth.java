package poafs.auth;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class ReticulateAuth extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a0319909116179055610f208061003b6000396000f3006060604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632b68b9c6811461009d578063386a424f146100b2578063464232cb1461017a5780634a632feb146101d65780634cd6bd3914610244578063638ed37614610319578063ce82eea91461036a578063d27cc73514610411578063f1afe04d14610472575b600080fd5b34156100a857600080fd5b6100b06104c3565b005b34156100bd57600080fd5b61010360046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506104ea95505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013f578082015183820152602001610127565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018557600080fd5b6100b060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506105fa915050565b34156101e157600080fd5b61023260046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050509235600160a060020a031692506107cd915050565b60405190815260200160405180910390f35b341561024f57600080fd5b6100b060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061085a95505050505050565b341561032457600080fd5b61010360046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506109a595505050505050565b341561037557600080fd5b6100b060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843782019150505050505091908035600160a060020a031690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505093359350610aa492505050565b341561041c57600080fd5b6100b060046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050600160a060020a0385351694602001359350610c2092505050565b341561047d57600080fd5b6100b060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d0495505050505050565b60005433600160a060020a03908116911614156104e857600054600160a060020a0316ff5b565b6104f2610e03565b6001826040518082805190602001908083835b602083106105245780518252601f199092019160209182019101610505565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ee5780601f106105c3576101008083540402835291602001916105ee565b820191906000526020600020905b8154815290600101906020018083116105d157829003601f168201915b50505050509050919050565b60006001836040518082805190602001908083835b6020831061062e5780518252601f19909201916020918201910161060f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a03331660009081526001808301602052604090912001549091506003901080159061072c57506001836040518082805190602001908083835b602083106106c15780518252601f1990920191602091820191016106a2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a03808416600090815260019283016020908152604080832085015433909416835285850190915290209091015410155b156107c8576001836040518082805190602001908083835b602083106107635780518252601f199092019160209182019101610744565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a0383166000908152600190910160205260408120906107bd8282610e15565b600182016000905550505b505050565b60006001836040518082805190602001908083835b602083106108015780518252601f1990920191602091820191016107e2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a03831660009081526001918201602052604090200154905092915050565b602060405190810160405280838152506001846040518082805190602001908083835b6020831061089c5780518252601f19909201916020918201910161087d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390208151819080516108e4929160200190610e59565b50905050604080519081016040528082815260200160038152506001846040518082805190602001908083835b602083106109305780518252601f199092019160209182019101610911565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a0333166000908152600190910160205260409020815181908051610993929160200190610e59565b50602082015160019091015550505050565b6109ad610e03565b6001826040518082805190602001908083835b602083106109df5780518252601f1990920191602091820191016109c0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101600033600160a060020a0316600160a060020a031681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ee5780601f106105c3576101008083540402835291602001916105ee565b60006001856040518082805190602001908083835b60208310610ad85780518252601f199092019160209182019101610ab9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a033316600090815260018083016020526040909120015490915060039010801590610b5c5750600160a060020a0333166000908152600180830160205260409091200154829010155b15610c19576040805190810160405280848152602001838152506001866040518082805190602001908083835b60208310610ba85780518252601f199092019160209182019101610b89565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a0386166000908152600190910160205260409020815181908051610c0b929160200190610e59565b506020820151600190910155505b5050505050565b60006001846040518082805190602001908083835b60208310610c545780518252601f199092019160209182019101610c35565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a033316600090815260018083016020526040909120015490915060039010801590610cd85750600160a060020a0333166000908152600180830160205260409091200154829010155b15610cfe57600160a060020a038316600090815260018083016020526040909120018290555b50505050565b60036001826040518082805190602001908083835b60208310610d385780518252601f199092019160209182019101610d19565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600160a060020a0333166000908152600191820160205260409020015410610e00576001816040518082805190602001908083835b60208310610dc05780518252601f199092019160209182019101610da1565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405190819003902060006107c88282610e15565b50565b60206040519081016040526000815290565b50805460018160011615610100020316600290046000825580601f10610e3b5750610e00565b601f016020900490600052602060002090810190610e009190610ed7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e9a57805160ff1916838001178555610ec7565b82800160010185558215610ec7579182015b82811115610ec7578251825591602001919060010190610eac565b50610ed3929150610ed7565b5090565b610ef191905b80821115610ed35760008155600101610edd565b905600a165627a7a723058208c0898e1c23a166baf16ced1db642962fa593d4be6b1a6fcc1f8747a1bdbc8ae0029";

    protected ReticulateAuth(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ReticulateAuth(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> destruct() {
        Function function = new Function(
                "destruct", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getFileName(String fileId) {
        Function function = new Function("getFileName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> revokeShare(String fileId, String revokee) {
        Function function = new Function(
                "revokeShare", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId), 
                new org.web3j.abi.datatypes.Address(revokee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getAccessLevel(String fileId, String user) {
        Function function = new Function("getAccessLevel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId), 
                new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addFile(String fileId, String name, byte[] key) {
        Function function = new Function(
                "addFile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId), 
                new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> getKeyForFile(String fileId) {
        Function function = new Function("getKeyForFile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> shareFile(String fileId, String recipient, byte[] recipientKey, BigInteger level) {
        Function function = new Function(
                "shareFile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId), 
                new org.web3j.abi.datatypes.Address(recipient), 
                new org.web3j.abi.datatypes.DynamicBytes(recipientKey), 
                new org.web3j.abi.datatypes.generated.Uint256(level)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> modifyAccesLevel(String fileId, String user, BigInteger level) {
        Function function = new Function(
                "modifyAccesLevel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId), 
                new org.web3j.abi.datatypes.Address(user), 
                new org.web3j.abi.datatypes.generated.Uint256(level)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeFile(String fileId) {
        Function function = new Function(
                "removeFile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(fileId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<ReticulateAuth> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ReticulateAuth.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ReticulateAuth> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ReticulateAuth.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static ReticulateAuth load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReticulateAuth(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ReticulateAuth load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReticulateAuth(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
